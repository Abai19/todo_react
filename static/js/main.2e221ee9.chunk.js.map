{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Todo/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","border","padding","borderRadius","marginBottom","input","marginRight","TodoItem","todo","index","onChange","removeTodo","useContext","classes","completed","push","style","className","join","type","checked","id","title","onClick","bind","ul","listStyle","margin","Todolist","props","todos","map","key","onToggle","AddTodo","onCreate","defaultValue","useState","value","setValue","event","target","clear","useInputValue","onSubmit","preventDefault","trim","class","App","setTodos","useEffect","fetch","then","response","json","Provider","filter","concat","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sKAGeA,EADAC,IAAMC,gBCEfC,EAAO,CACTC,GAAG,CACPC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,OAAQ,iBACRC,QAAS,aACTC,aAAc,OACdC,aAAc,SAEVC,MAAM,CACFC,YAAa,SA0BNC,MAvBd,YAA0C,IAAvBC,EAAsB,EAAtBA,KAAKC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,SACpBC,EAAaC,qBAAWnB,GAAxBkB,WACJE,EAAQ,GAIZ,OAHCL,EAAKM,WACJD,EAAQE,KAAK,QAGf,wBAAIC,MAAOpB,EAAOC,IACd,0BAAMoB,UAAWJ,EAAQK,KAAK,KAC1B,2BAAOC,KAAK,WAAUC,QAASZ,EAAKM,UAAWE,MAAOpB,EAAOS,MAC7DK,SAAU,kBAAKA,EAASF,EAAKa,OAEjC,gCAASZ,EAAM,EAAf,KAJA,OAIkCD,EAAKc,OAEvC,4BAAQL,UAAU,KAAKM,QAASZ,EAAWa,KAAK,KAAKhB,EAAKa,KAA1D,UC7BFzB,EAAO,CACT6B,GAAG,CACCC,UAAW,OACXC,OAAQ,EACRzB,QAAS,IAgBF0B,MAbf,SAAkBC,GACd,OACI,wBAAIb,MAAOpB,EAAO6B,IAClBI,EAAMC,MAAMC,KAAK,SAACvB,EAAKC,GACrB,OAAM,kBAAC,EAAD,CAAUD,KAAMA,EAAMwB,IAAKxB,EAAKa,GAAIZ,MAAOA,EAAOC,SAAUmB,EAAMI,gBCuBnEC,MAtBf,YAA8B,IAAXC,EAAU,EAAVA,SACT9B,EAbV,WAAyC,IAAjB+B,EAAgB,uDAAH,GAAG,EAChBC,mBAAUD,GADM,mBAClCE,EADkC,KAC3BC,EAD2B,KAEpC,MAAO,CACHf,KAAM,CACFc,QACA5B,SAAU,SAAA8B,GAAK,OAAGD,EAAUC,EAAMC,OAAOH,SAE9CI,MAAO,kBAAMH,EAAS,KACtBD,MAAO,kBAAMA,IAKJK,CAAc,IAS9B,OACQ,0BAAM3B,MAAO,CAACZ,aAAa,QAASwC,SARxC,SAAuBJ,GACnBA,EAAMK,iBACHxC,EAAMiC,QAAQQ,SACbX,EAAS9B,EAAMiC,SACfjC,EAAMqC,WAKd,yCAAOK,MAAM,WAAc1C,EAAMmB,OACjC,4BAAQL,KAAK,SAASF,UAAU,OAAhC,eCkBW+B,MAzCf,WAAgB,IAAD,EACWtD,IAAM2C,SAAS,IAD1B,mBACNP,EADM,KACAmB,EADA,KA8Bf,OA5BEC,qBAAU,WACRC,MAAM,uDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAtB,GACJmB,EAASnB,QAEd,IAuBC,kBAAC,EAAQyB,SAAT,CAAkBjB,MAAO,CAAC3B,WAX9B,SAAoBU,GAClB4B,EAASnB,EAAM0B,QAAO,SAAAhD,GAAI,OAAEA,EAAKa,KAAKA,SAWpC,yBAAKJ,UAAU,WACb,yCACA,kBAAC,EAAD,CAASkB,SAXf,SAAiBb,GACf2B,EAASnB,EAAM2B,OAAO,CAAC,CACrBnC,QACAD,GAAIqC,KAAKC,MACT7C,WAAU,SAQTgB,EAAM8B,OAAQ,kBAAC,EAAD,CAAU9B,MAAOA,EAAOG,SAzBzC,SAAoBZ,GACnB4B,EAASnB,EAAMC,KAAI,SAAAvB,GAIjB,OAHGA,EAAKa,KAAKA,IACXb,EAAKM,WAAWN,EAAKM,WAEhBN,SAoBwD,oDC5BhDqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.2e221ee9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Context= React.createContext()\r\nexport default Context","import React,{ useContext } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Context from '../context'\r\n\r\nconst styles={\r\n    li:{\r\ndisplay: 'flex',\r\njustifyContent: 'space-between',\r\nalignItems: 'center',\r\nborder: '1px solid #ccc',\r\npadding: '.5rem 1rem',\r\nborderRadius: '4px ',\r\nmarginBottom: '.5rem'\r\n    },\r\n    input:{\r\n        marginRight: '1rem'\r\n    }\r\n}\r\n function TodoItem({todo,index, onChange}){\r\n     const {removeTodo}= useContext(Context)\r\n  const classes=[]\r\n  if(todo.completed){\r\n      classes.push('done')\r\n  }\r\n    return(\r\n    <li style={styles.li}>\r\n        <span className={classes.join('')}>\r\n            <input type=\"checkbox\"checked={todo.completed} style={styles.input} \r\n            onChange={()=> onChange(todo.id)}/>\r\n        \r\n        <strong>{index+1} </strong>&nbsp;{todo.title}\r\n        </span>\r\n        <button className=\"rm\" onClick={removeTodo.bind(null,todo.id)}>&times;</button>\r\n        </li>    \r\n        )\r\n}\r\nTodoItem.propTypes={\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number,\r\n    onChange: PropTypes.func.isRequired\r\n}\r\nexport default TodoItem","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TodoItem from './TodoItem'\r\nconst styles={\r\n    ul:{\r\n        listStyle: 'none',\r\n        margin: 0,\r\n        padding: 0\r\n    }\r\n}\r\nfunction Todolist(props){\r\n    return(\r\n        <ul style={styles.ul}>\r\n      { props.todos.map ((todo,index)=>{\r\n          return<TodoItem todo={todo} key={todo.id} index={index} onChange={props.onToggle}/>\r\n      })}\r\n        </ul>\r\n    )\r\n}\r\nTodolist.propTypes={\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\nonToggle: PropTypes.func.isRequired\r\n}\r\nexport default Todolist","import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction useInputValue (defaultValue=''){\r\nconst[value, setValue]= useState (defaultValue)\r\n    return {\r\n        bind: {\r\n            value,\r\n            onChange: event=> setValue (event.target.value)\r\n        },\r\n       clear: () => setValue(''),\r\n       value: () => value\r\n    }\r\n}\r\n\r\nfunction AddTodo ({onCreate}){\r\n    const input=useInputValue('')\r\n\r\n    function submitHandler(event){\r\n        event.preventDefault()\r\n        if(input.value().trim()) {\r\n            onCreate(input.value())\r\n            input.clear()\r\n        }\r\n    }\r\nreturn(\r\n        <form style={{marginBottom:'1rem'}} onSubmit={submitHandler}>\r\n    <input class=\"newtodo\" {...input.bind}/>\r\n    <button type='submit' className=\"btn\"> ADD TODO</button>\r\n    </form>\r\n)\r\n}\r\n\r\n\r\nAddTodo.propTypes= {\r\n    onCreate: PropTypes.func\r\n}\r\nexport default AddTodo","import React,{ useEffect } from 'react';\nimport Todolist from './Todo/TodoList';\nimport Context from './context';\nimport AddTodo from './Todo/AddTodo';\n\nfunction App() {\n  const [todos,setTodos]= React.useState([])\n  useEffect(()=>{\n    fetch('https://jsonplaceholder.typicode.com/todos?_limit=4')\n      .then(response => response.json())\n      .then(todos => {\n        setTodos(todos)\n  })\n}, [])\n\n  function toggleTodo(id){\n   setTodos(todos.map(todo=>{\n     if(todo.id===id){\n       todo.completed=!todo.completed\n     }\n     return todo\n   })\n   )\n  }\n\nfunction removeTodo(id){\n  setTodos(todos.filter(todo=>todo.id!==id))\n}  \nfunction addTodo(title){\n  setTodos(todos.concat([{\n    title,\n    id: Date.now(),\n    completed:false\n  }]))\n}\nreturn (\n    <Context.Provider value={{removeTodo}}>\n    <div className=\"wrapper\">\n      <h1>TODO list</h1>\n      <AddTodo onCreate= {addTodo}/>\n    {todos.length? <Todolist todos={todos} onToggle={toggleTodo}/>: <p>U have no business</p>}\n    </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}